[[modules-http]]
== HTTP

http 模块允许通过HTTP公开 *Elasticsearch* API。

http机制本质上是完全异步的，意味着不存在等待响应的阻塞线程。对HTTP使用异步通信的好处是解决了http://en.wikipedia.org/wiki/C10k_problem[C10k问题]。

为了更好的性能，连接时尽可能考虑使用http://en.wikipedia.org/wiki/Keepalive#HTTP_Keepalive[HTTP keep alive]，并且尽量让客户端不使用http://en.wikipedia.org/wiki/Chunked_transfer_encoding[HTTP chunking]。

[float]
=== 设定

下表中的设定可以用来配置 HTTP。注意它们都不能动态更新，要让它们生效，必须在 Elasticsearch <<settings, 配置文件>>中设定。

[cols="<,<",options="header",]
|=======================================================================
|设定 |详细描述
|`http.port` |绑定的端口范围。默认是 `9200-9300`。

|`http.publish_port` |与该节点通信时 HTTP 客户端应该使用的端口。当一个集群节点位于代理服务器或者防火墙后，并且 `http.port` 不能从外部直接寻址时有用。默认为通过 `http.port` 指定的实际端口。

|`http.bind_host` |绑定 HTTP 服务的主机地址。默认为 `http.host` （若设置）或者 `network.bind_host`。

|`http.publish_host` |发布来让 HTTP 客户端连接的主机地址。默认为 `http.host` （若设置）或者 `network.publish_host`。

|`http.host` |用来设置 `http.bind_host` 和 `http.publish_host`，默认为 `http.host` 或者 `network.host`。

|`http.max_content_length` |HTTP 请求的最大长度。默认为 `100mb`。如果设置超过 `Integer.MAX_VALUE`，将被重设为100mb。

|`http.max_initial_line_length` |HTTP URL 的最大长度。默认为 `4kb`

|`http.max_header_size` | 允许的头部的最大尺寸。默认为 `8kB`

|`http.compression` |可能的话支持压缩（带上可接受的编码）。默认为 `true`.

|`http.compression_level` |定义为 HTTP 响应使用的压缩级别。合法值在1（最小压缩）到9（（最大压缩）之间。默认为 `3`。

|`http.cors.enabled` |启用或禁用跨域资源共享，也就是，另一个域上的浏览器是否可以执行 Elasticsearch 请求。设置为 `true` 来让 Elasticsearch 能够处理预检 https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[CORS] 请求。如果发送在请求中的 `域` 是 `http.cors.allow-origin` 列表中允许的，Elasticsearch 将会以 `Access-Control-Allow-Origin` 头来回应这些请求。设为 `false` （默认）来使 Elasticsearch 忽略 `域` 请求头，有效地禁用了 CORS 请求，因为 Elasticsearch 绝不会以 `Access-Control-Allow-Origin` 头来响应。注意如果客户端没有用 `域` 头部发送一个预检请求或者它不检查服务端发来的响应头来验证 `Access-Control-Allow-Origin` 响应头部，那么跨域安全是妥协的。如果禁用了 CORS，客户端知道这点的唯一方式是发送一个预检请求然后意识到要求的响应头缺失了。

|`http.cors.allow-origin` |允许哪些域。默认为不允许任何域。若在值前面追加一个 `/` ，这将被视为正则表达式，允许你支持 HTTP 和 HTTPs。例如，使用 `/https?:\/\/localhost(:[0-9]+)?/` 将会返回两种情形下各自正确的请求头。`*` 是一个合法值，但被认为是一个 *安全风险* 因为 Elasticsearch 实例对 *任何地方* 的跨域请求都是开放的。

|`http.cors.max-age` |浏览器发送一个“预检”选项-决定 CORS 设定的请求。`max-age` 定义了结果被缓存的时间。默认为 `1728000`（20天）

|`http.cors.allow-methods` |允许哪些方法。默认为 `OPTIONS, HEAD, GET, POST, PUT, DELETE`。

|`http.cors.allow-headers` |允许哪些头部。默认为 `X-Requested-With, Content-Type, Content-Length`。

|`http.cors.allow-credentials` | 是否返回 `Access-Control-Allow-Credentials` 头部。注意：只有当该设定为 `true` 时才会返回该头部。默认为 `false`。

|`http.detailed_errors.enabled` |启用或禁用响应结果中详细错误信息和堆栈跟踪的输出。注意：当设置为 `false` 且指定了 `error_trace` 请求参数，会返回一个错误；没有指定 `error_trace` 时会返回一个简单消息。默认为 `true`。

|`http.pipelining` |启用或禁用 HTTP 管道，默认为 `true`。

|`http.pipelining.max_events` |在一个 HTTP 连接关闭之前内存中事件队列的最大数量，默认为 `10000`。

|`http.max_warning_header_count` |客户端 HTTP 响应的警告头部的最大数量，默认无限制。

|`http.max_warning_header_size` |客户端 HTTP 响应的警告头部的最大尺寸，默认无限制。

|=======================================================================

<<modules-network,网络设定>>也会一同使用

[float]
=== 禁用 HTTP

Http 模块可以通过将T`http.enabled` 设置为 `false` 来彻底禁用不启动。Elasticsearch 节点（以及 Java 客户端）内部通信使用<<modules-transport,传输接口>>，而不是 HTTP。对于不会直接服务于 REST 请求的节点，完全禁用 `http` 层是合理的。例如，如果你有专门用来处理所有 REST 请求的<<modules-node,客户端节点>>，你可以禁用<<modules-node,仅数据节点>>上的 HTTP。但是需注意，你将无法直接发送任何 REST 请求（例如获取节点状态）到禁用 HTTP 的节点。
