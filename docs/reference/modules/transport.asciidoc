[[modules-transport]]
== 传输

传输模块用于集群内节点间的内部通信。从一个节点到另一个节点的每个调用都是用传输模块。例如，当一个节点处理 HTTP GET 请求时，实际上是由持有该数据的另一个节点处理的。

传输机制是完全异步的，这意味着没有阻塞线程等待响应。使用异步通信的好处是解决了 http://en.wikipedia.org/wiki/C10k_problem[C10k 问题]，也是广播请求/收集结果（例如，ES中的搜索）的理想解决方案。

[float]
=== TCP 传输

TCP 传输是传输模块基于 TCP 的实现，有以下配置：

[cols="<,<",options="header",]
|=======================================================================
|配置 |简介
|`transport.tcp.port` |绑定端口范围，默认为 `9300-9400`。

|`transport.publish_port` |集群中其他节点在与此节点通信时应使用的端口。当集群节点位于代理或防火墙后，并且在 `transport.tcp.port` 不能从外部直接访问时，此功能很有用。默认为通过 `transport.tcp.port` 分配的实际端口。

|`transport.bind_host` |传输服务绑定的主机地址。默认为 `transport.host`（若设置）或 `network.bind_host`。

|`transport.publish_host` |节点在集群上发布的主机地址，其他节点连接这个地址。默认为 `transport.host`（若设置）或 `network.publish_host`。

|`transport.host` |用于设置 `transport.bind_host` 和 `transport.publish_host`。默认设置为 `transport.host` 或 `network.host`。

|`transport.tcp.connect_timeout` |套接字连接超时设置。默认为 `30s`。

|`transport.tcp.compress` |设置为 `true` 以在所有节点之间启用压缩（`DEFLATE`）。默认为 `false`。

|`transport.ping_schedule` | 定期发送一个应用级别的 ping 消息以确保节点间连接是活跃的。传输客户端默认为 `5s`，设置成 `-1` 为禁用。最好正确配置 TCP keep-alives 而不要使用这个配置，因为 TCP keep-alives 可应用到所有长连接而不仅仅是传输连接。

|=======================================================================

<<modules-network,网络配置>>也一并使用

[float]
==== TCP 传输配置文件

Elasticsearch 允许使用传输配置文件来绑。如以下的示例配置

[source,yaml]
--------------
transport.profiles.default.port: 9300-9400
transport.profiles.default.bind_host: 10.0.0.1
transport.profiles.client.port: 9500-9600
transport.profiles.client.bind_host: 192.168.0.1
transport.profiles.dmz.port: 9700-9800
transport.profiles.dmz.bind_host: 172.16.1.2
--------------

`default` 配置文件是特殊的。它作为自他配置文件的后备，如果其他文件没有指定配置，则集群中的节点使用该默认配置来连接。

如上例所示，下列参数可以在每一个传输配置文件中进行配置：

* `port`: 绑定的端口
* `bind_host`: 绑定的主机
* `publish_host`: 信息 API 中发布的主机地址
* `tcp_no_delay`: 配置套接字的 `TCP_NO_DELAY` 选项
* `tcp_keep_alive`: 配置套接字的 `SO_KEEPALIVE` 选项
* `reuse_address`: 配置该套接字的 `SO_REUSEADDR` 选项
* `tcp_send_buffer_size`: 配置套接字的发送缓冲大小
* `tcp_receive_buffer_size`: 配置套接字的接收缓冲大小

[float]
==== 长期空闲链接

Elasticsearch 为集群中的每一对节点都打开了一个长期的 TCP 连接，其中一些可能长期保持空闲。尽管如此，Elasticsearch 要求这些连接保持一直打开，且如果节点间连接被外部影响（比如防火墙）关闭时，集群的操作可能被破坏。所以将网络配置成为能够在 Elasticsearch 节点间维持长期空闲连接是很重要的，例如通过激活 `tcp_keep_alive` 同时确保存活定时间隔比任何可能造成空闲连接关闭的超时时间短，或者在保持连接机制无法配置时去配置 `transport.ping_schedule` 。

[float]
=== Transport Tracer

传输模块有一个专用的 tracer 日志，当它被激活时，日志系统会记录传入和传出的请求。可以通过动态设置 `org.elasticsearch.transport.TransportService.tracer` 为 `TRACE` 级别来开启：

[source,js]
--------------------------------------------------
PUT _cluster/settings
{
   "transient" : {
      "logger.org.elasticsearch.transport.TransportService.tracer" : "TRACE"
   }
}
--------------------------------------------------
// CONSOLE

还可以使用一组 include 和 exclude 通配符模式来控制 tracer 的内容。默认情况下，除了故障检测的 ping 请求，所有请求都将被跟踪：

[source,js]
--------------------------------------------------
PUT _cluster/settings
{
   "transient" : {
      "transport.tracer.include" : "*",
      "transport.tracer.exclude" : "internal:discovery/zen/fd*"
   }
}
--------------------------------------------------
// CONSOLE


