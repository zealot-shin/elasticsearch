[[modules-remote-clusters]]
== 远程集群

ifndef::include-xpack[]
_远程集群_ 模块允许建立到远程集群的单向连接。此功能用于<<modules-cross-cluster-search,跨集群搜索>>。
endif::[]
ifdef::include-xpack[]
_远程集群_ 模块允许建立到远程集群的单向连接。此功能用于跨集群副本和<<modules-cross-cluster-search,跨集群搜索>>。
endif::[]

远程集群连接通过配置远程集群来工作并只连接远程集群中有限数量的节点。每个远程集群使用名称和其种子节点列表来引用。注册远程集群后，从其中一个种子节点检索其集群状态，所以默认情况下，最多选择三个 _网关节点_ 去连接，作为远程集群请求的一部分。远程集群连接仅由从协调节点到之前选定的远程节点的单向连接组成。可以通过给节点属性打标签来决定选择哪个节点（请参见<<remote cluster settings,远程集群设置>>）。

配置了远程集群的集群中的每个节点都连接到一个或更多的 _网关节点_，并使用它们将请求联合到远程集群。

[float]
[[configuring-remote-clusters]]
=== 配置远程集群

可以使用全局<<cluster update settings,集群设定>>（可以动态更新），或相对各节点的本地 `elasticsearch.yml` 文件来指定远程集群。

如果远程集群是通过 `elasticsearch.yml` 配置的，则只有使用该配置的节点能够连接到远程集群。也就是说，依赖远程集群请求的功能必须专门从这些节点驱动。通过<<cluster update settings,集群设定 API>>配置的远程集群，在集群的每个节点上都能访问。

连接到远程集群的节点的 `elasticsearch.yml` 配置文件需要列出应连接到的远程集群，例如：

[source,yaml]
--------------------------------
cluster:
    remote:
        cluster_one: <1>
            seeds: 127.0.0.1:9300
        cluster_two: <1>
            seeds: 127.0.0.1:9301

--------------------------------
<1> `cluster_one` 和 `cluster_two` 是任意的 _集群别名_ 表示到每个集群的连接。这些名字随后被用于区分本地和远程索引。

同样的例子使用<<cluster-update-settings,集群设定 API>> 来为集群中所有节点添加远程集群如下所示：

[source,js]
--------------------------------
PUT _cluster/settings
{
  "persistent": {
    "cluster": {
      "remote": {
        "cluster_one": {
          "seeds": [
            "127.0.0.1:9300"
          ]
        },
        "cluster_two": {
          "seeds": [
            "127.0.0.1:9301"
          ]
        },
        "cluster_three": {
          "seeds": [
            "127.0.0.1:9302"
          ]
        }
      }
    }
  }
}
--------------------------------
// CONSOLE
// TEST[setup:host]
// TEST[s/127.0.0.1:9300/\${transport_host}/]

从集群设置中删除一个远程集群，只需把它的种子设置为 `null`:

[source,js]
--------------------------------
PUT _cluster/settings
{
  "persistent": {
    "cluster": {
      "remote": {
        "cluster_three": {
          "seeds": null <1>
        }
      }
    }
  }
}
--------------------------------
// CONSOLE
// TEST[continued]
<1> `cluster_three` 会从集群设定中移除，保留 `cluster_one` 和 `cluster_two` 不变。

[float]
[[remote-cluster-settings]]
=== 远程集群设定

`cluster.remote.connections_per_cluster`::

  每个远程集群要连接到的网关节点数。默认为 `3`。

`cluster.remote.initial_connect_timeout`::

  节点启动时等待建立远程连接的时间。默认值为 `30s`。

`cluster.remote.node.attr`::

  在远程集群中筛选出符合网关节点条件的节点的节点属性。例如，一个节点可以有一个节点属性 `node.attr.gateway: true`，这样，只有具有此属性的节点才会被连接到，如果 `cluster.remote.node.attr` 设置为 `gateway` 的话。

`cluster.remote.connect`::

  默认情况下，集群中的任何节点都可以充当跨集群客户端，并且连接到远程集群。`cluster.remote.connect` 设置可以设置为 `false`（默认为 `true`），以防止某些节点连接到远程集群。远程集群请求必须发送到允许充当跨集群客户端的节点。

`cluster.remote.${cluster_alias}.skip_unavailable`::

  每个集群的布尔设置，允许在下述情况跳过特定集群，即没有一个属于它们的节点可用，并且它们是一个远程集群请求的目标时。默认值为 `false`，表示所有集群都是强制的，但可以通过把此设置设为 `true` 来选择性地将其变为可选项。

[float]
[[retrieve-remote-clusters-info]]
=== 检索远程集群信息

<<cluster-remote-info, 远程集群信息 API>> 允许检索有关配置的远程集群，以及节点连接到的远程节点的信息。
