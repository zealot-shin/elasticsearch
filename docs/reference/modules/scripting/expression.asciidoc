[[modules-scripting-expression]]
=== Lucene 表达式语言

Lucene 的表达式将 `javascript` 表达式编译为字节码。他们设计用于高性能自定义排名和排序功能，并且
默认情况下启用了 `inline` 和 `stored` 脚本。

[float]
=== 性能

表达式被设计为具有与自定义 Lucene 代码竞争的性能。这种性能是由于每个文档的开销比其他脚本引擎低：表达式 "up-front" 做的更多。

这使得执行速度非常快，甚至比编写的 `本机` 脚本的速度还要快。

[float]
=== 语法

表达式支持 javascript 语法的一个子集：单个表达式。

有关可用的运算符和函数的详细信息，查看链接：http://lucene.apache.org/core/6_0_0/expressions/index.html？org/apache/lucene/expressions/js/package summary.html[表达式模块文档]

`expression` 脚本中的变量可供访问：

* 文档字段，例如 `doc['myfield'].value`
* 字段支持的变量和方法，例如 `doc['myfield'].empty`
* 传递到脚本中的参数，例如 `mymodifier`
* 当前文档的分数，`_score`（仅在 `cript_score` 中使用时可用）

可以将表达式脚本用于 `script_score`，`script_fields`，排序脚本和数字聚合脚本，只需将 `lang` 参数设置为 `expression`。

[float]
=== 数值字段 API
[cols="<,<",options="header",]
|=======================================================================
|表达式 |描述
|`doc['field_name'].value` |字段值，作为 `double`。

|`doc['field_name'].empty` |表示字段在文档中是否有值的布尔值。

|`doc['field_name'].length` |文档中值的数目。

|`doc['field_name'].min()` |文档中该字段的最小值。

|`doc['field_name'].max()` |文档中该字段的最大值。

|`doc['field_name'].median()` |文档中该字段的中值。

|`doc['field_name'].avg()` |文档中的平均值。

|`doc['field_name'].sum()` |文档中的值的总和。
|=======================================================================

当文档完全缺少字段时，默认情况下，该值将被视为 `0`。您可以将其视为另一个值，例如 `doc['myfield'].empty ? 100 : doc['myfield'].value`

当文档的字段具有多个值时，默认情况下返回最小值。您可以选择不同的值，例如 `doc['myfield'].sum()`。

布尔字段显示为数字，其中 `true` 映射到 `1`，`false` 映射到 `0`。例如：`doc['on_sale'].value ? doc['price'].value * 0.5 : doc['price'].value`

[float]
=== 日期字段 API
日期字段被视为自1970年1月1日起的毫秒数，并且支持上面的数字字段API，以及对某些特定日期字段的访问：

[cols="<,<",options="header",]
|=======================================================================
|表达式 |描述
|`doc['field_name'].date.centuryOfEra`|世纪 (1-2920000)

|`doc['field_name'].date.dayOfMonth`|天 (1-31), 例如 `1` 表示一个月的第一天。

|`doc['field_name'].date.dayOfWeek`|星期几 (1-7), 例如 `1` 表示星期一。

|`doc['field_name'].date.dayOfYear`|一年的哪天, 例如 `1` 表示1月1号。

|`doc['field_name'].date.era`|纪元：`0` 表示 BC，`1` 表示 AD。

|`doc['field_name'].date.hourOfDay`|小时 (0-23)。

|`doc['field_name'].date.millisOfDay`|一天内的毫秒数 (0-86399999)。

|`doc['field_name'].date.millisOfSecond`|一秒内的毫秒数 (0-999)。

|`doc['field_name'].date.minuteOfDay`|一天内的分钟数 (0-1439)。

|`doc['field_name'].date.minuteOfHour`|小时内的分钟数 (0-59)。

|`doc['field_name'].date.monthOfYear`|一年的几月 (1-12)，例如 `1` 表示一月。

|`doc['field_name'].date.secondOfDay`|一天内的秒数 (0-86399)。

|`doc['field_name'].date.secondOfMinute`|一分钟内的秒数 (0-59)。

|`doc['field_name'].date.year`|年 (-292000000 - 292000000)。

|`doc['field_name'].date.yearOfCentury`|世纪内的年数 (1-100)。

|`doc['field_name'].date.yearOfEra`|纪元年数 (1-292000000)。
|=======================================================================

下例计算了 date0 和 date1 两个 `date` 字段年的差值：

`doc['date1'].date.year - doc['date0'].date.year`

[float]
=== `地理点` 字段 API
[cols="<,<",options="header",]
|=======================================================================
|表达式 |描述
|`doc['field_name'].empty` |表示文档中该字段是否有值的布尔值
values within the doc.

|`doc['field_name'].lat` |地理点纬度。

|`doc['field_name'].lon` |地理点经度。
|=======================================================================

下例以公里为单位计算了到华盛顿特区的距离：

`haversin(38.9072, 77.0369, doc['field_name'].lat, doc['field_name'].lon)`

这个例子中，坐标可以作为参数传递给脚本，例如，基于用户的地理位置。

[float]
=== 限制

相对于其他脚本语言，有一些限制：

* 只能访问数字、布尔、日期和地理点字段
* 存储字段不可用
